//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentalManagemnet.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RentalManagementEntities : DbContext
    {
        public RentalManagementEntities()
            : base("name=RentalManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Maintenance> Maintenances { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<PropertyAudit> PropertyAudits { get; set; }
        public virtual DbSet<RentAudit> RentAudits { get; set; }
        public virtual DbSet<Rent> Rents { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<TenantAudit> TenantAudits { get; set; }
        public virtual DbSet<TransactionAudit> TransactionAudits { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
    
        public virtual int createInvoice(Nullable<int> propertyID, Nullable<System.DateTime> dueDate, Nullable<decimal> amount, string type)
        {
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("propertyID", propertyID) :
                new ObjectParameter("propertyID", typeof(int));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("dueDate", dueDate) :
                new ObjectParameter("dueDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createInvoice", propertyIDParameter, dueDateParameter, amountParameter, typeParameter);
        }
    
        public virtual int createNotice(string description, Nullable<System.DateTime> date, Nullable<int> propertyID, string title)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("propertyID", propertyID) :
                new ObjectParameter("propertyID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createNotice", descriptionParameter, dateParameter, propertyIDParameter, titleParameter);
        }
    
        public virtual int createProperty(string address, string type, Nullable<int> rooms, Nullable<int> garages)
        {
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var roomsParameter = rooms.HasValue ?
                new ObjectParameter("rooms", rooms) :
                new ObjectParameter("rooms", typeof(int));
    
            var garagesParameter = garages.HasValue ?
                new ObjectParameter("garages", garages) :
                new ObjectParameter("garages", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createProperty", addressParameter, typeParameter, roomsParameter, garagesParameter);
        }
    
        public virtual int createTenant(Nullable<int> agentID, string name, string phone, string cnic)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("agentID", agentID) :
                new ObjectParameter("agentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cnicParameter = cnic != null ?
                new ObjectParameter("cnic", cnic) :
                new ObjectParameter("cnic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createTenant", agentIDParameter, nameParameter, phoneParameter, cnicParameter);
        }
    
        public virtual int insertAgent(string name, string phone, string address, Nullable<decimal> fees)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var feesParameter = fees.HasValue ?
                new ObjectParameter("fees", fees) :
                new ObjectParameter("fees", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertAgent", nameParameter, phoneParameter, addressParameter, feesParameter);
        }
    
        public virtual int insertApplication(Nullable<int> tenantID, string description, string status, string title)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("tenantID", tenantID) :
                new ObjectParameter("tenantID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertApplication", tenantIDParameter, descriptionParameter, statusParameter, titleParameter);
        }
    
        public virtual int insertMaintenance(string description, Nullable<decimal> cost, Nullable<System.DateTime> date, Nullable<int> propertyID, string title)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("propertyID", propertyID) :
                new ObjectParameter("propertyID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertMaintenance", descriptionParameter, costParameter, dateParameter, propertyIDParameter, titleParameter);
        }
    
        public virtual int insertTransaction(Nullable<int> invoiceID, Nullable<decimal> amount)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertTransaction", invoiceIDParameter, amountParameter);
        }
    
        public virtual int rentProperty(Nullable<int> tenantID, Nullable<int> propertyID, Nullable<decimal> rentAmount, Nullable<int> duration, Nullable<System.DateTime> startDate)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("tenantID", tenantID) :
                new ObjectParameter("tenantID", typeof(int));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("propertyID", propertyID) :
                new ObjectParameter("propertyID", typeof(int));
    
            var rentAmountParameter = rentAmount.HasValue ?
                new ObjectParameter("rentAmount", rentAmount) :
                new ObjectParameter("rentAmount", typeof(decimal));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rentProperty", tenantIDParameter, propertyIDParameter, rentAmountParameter, durationParameter, startDateParameter);
        }
    
        public virtual int deleteTenant(Nullable<int> tenantID)
        {
            var tenantIDParameter = tenantID.HasValue ?
                new ObjectParameter("tenantID", tenantID) :
                new ObjectParameter("tenantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteTenant", tenantIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> retrieveExpense()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("retrieveExpense");
        }
    
        public virtual ObjectResult<Nullable<decimal>> retrieveIncome()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("retrieveIncome");
        }
    
        public virtual ObjectResult<retrieveEmptyProperties_Result> retrieveEmptyProperties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveEmptyProperties_Result>("retrieveEmptyProperties");
        }
    
        public virtual ObjectResult<retrieveRentedProperties_Result> retrieveRentedProperties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveRentedProperties_Result>("retrieveRentedProperties");
        }
    
        public virtual ObjectResult<retrieveSoldProperties_Result> retrieveSoldProperties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveSoldProperties_Result>("retrieveSoldProperties");
        }
    
        public virtual ObjectResult<retrieveApplicationsOfUser_Result> retrieveApplicationsOfUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveApplicationsOfUser_Result>("retrieveApplicationsOfUser", userIDParameter);
        }
    
        public virtual ObjectResult<retrievePaidInvoicesOfUser_Result> retrievePaidInvoicesOfUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrievePaidInvoicesOfUser_Result>("retrievePaidInvoicesOfUser", userIDParameter);
        }
    
        public virtual ObjectResult<retrievePropertiesOfUser_Result> retrievePropertiesOfUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrievePropertiesOfUser_Result>("retrievePropertiesOfUser", userIDParameter);
        }
    
        public virtual ObjectResult<retrieveUnpaidInvoicesOfUser_Result> retrieveUnpaidInvoicesOfUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retrieveUnpaidInvoicesOfUser_Result>("retrieveUnpaidInvoicesOfUser", userIDParameter);
        }
    
        public virtual int deleteRent(Nullable<int> rentID)
        {
            var rentIDParameter = rentID.HasValue ?
                new ObjectParameter("rentID", rentID) :
                new ObjectParameter("rentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteRent", rentIDParameter);
        }
    
        public virtual int deleteAgent(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("agentID", agentID) :
                new ObjectParameter("agentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteAgent", agentIDParameter);
        }
    }
}
